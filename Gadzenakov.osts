{"version":"0.3.0","body":"function main(workbook: ExcelScript.Workbook) {\n  let dict_time = {};\n  let dict_coli = {};\n  let result = workbook.getWorksheet(\"Result\");\n  let picker_data = workbook.getWorksheet(\"Pickers Data\");\n  picker_data.activate();\n  let pickersUsedRange = picker_data.getUsedRange();\n  let lastRow = pickersUsedRange.getRowCount();\n\n  for (let i = 0; i < lastRow; i++) {\n    let user_name = picker_data.getRange(\"B\" + (i + 2));\n    let type_order = picker_data.getRange(\"H\" + (i + 2));\n    let coli = picker_data.getRange(\"F\" + (i + 2)).getValue();\n    let take_time = picker_data.getRange(\"D\" + (i + 2));\n    let next_time = picker_data.getRange(\"D\" + (i + 3));\n    let diff_time = next_time.getValue() - take_time.getValue();\n    diff_time = Math.round(diff_time * 86400);\n    if (diff_time <= 0 || diff_time >= 900) {\n      diff_time = 0;\n    }\n    if (dict_time.hasOwnProperty(user_name.getValue())) {\n      if (dict_time[user_name.getValue()].hasOwnProperty(type_order.getValue())) {\n        dict_time[user_name.getValue()][type_order.getValue()].push(diff_time);\n      } else {\n        dict_time[user_name.getValue()][type_order.getValue()] = [];\n        dict_time[user_name.getValue()][type_order.getValue()].push(diff_time);\n      }\n    } else {\n      dict_time[user_name.getValue()] = [];\n      if (dict_time[user_name.getValue()].hasOwnProperty(type_order.getValue())) {\n        dict_time[user_name.getValue()][type_order.getValue()].push(diff_time);\n      } else {\n        dict_time[user_name.getValue()][type_order.getValue()] = [];\n        dict_time[user_name.getValue()][type_order.getValue()].push(diff_time);\n      }\n    }\n\n    if (dict_coli.hasOwnProperty(user_name.getValue())) {\n      if (dict_coli[user_name.getValue()].hasOwnProperty(type_order.getValue())) {\n        dict_coli[user_name.getValue()][type_order.getValue()].push(coli);\n      } else {\n        dict_coli[user_name.getValue()][type_order.getValue()] = [];\n        dict_coli[user_name.getValue()][type_order.getValue()].push(coli);\n      }\n    } else {\n      dict_coli[user_name.getValue()] = [];\n      if (dict_coli[user_name.getValue()].hasOwnProperty(type_order.getValue())) {\n        dict_coli[user_name.getValue()][type_order.getValue()].push(coli);\n      } else {\n        dict_coli[user_name.getValue()][type_order.getValue()] = [];\n        dict_coli[user_name.getValue()][type_order.getValue()].push(coli);\n      }\n    }\n  }\n\n  let login_keys = Object.keys(dict_time);\n  let login_coli = Object.keys(dict_coli);\n\n  result.activate();\n  let current_row = 1\n\n  for (let i = 0; i < login_keys.length; i++) {\n    let outerKey = login_keys[i];\n    let outerColi = login_coli[i];\n    let order_keys = Object.keys(dict_time[outerKey]);\n    let innerDict = {};\n    let innerDictColi = {};\n    innerDict = dict_time[outerKey];\n    innerDictColi = dict_coli[outerColi];\n    for (let j = 0; j < order_keys.length; j++) {\n      let inner_values = {};\n      let innerColi_values = {};\n      inner_values = innerDict[order_keys[j]];\n      innerColi_values = innerDictColi[order_keys[j]];\n      let sum_time = 0;\n      let sum_coli = 0;\n      for (let k = 0; k < inner_values.length; k++) {\n        sum_time += inner_values[k];\n        sum_coli += innerColi_values[k];\n      }\n      result.getRange(\"A\" + (current_row + 1)).setValue(login_keys[i]);\n      result.getRange(\"B\" + (current_row + 1)).setValue(order_keys[j]);\n      result.getRange(\"C\" + (current_row + 1)).setValue(sum_time);\n      result.getRange(\"D\" + (current_row + 1)).setValue(sum_coli);\n      current_row += 1;\n    }\n  }\n}\n","description":"","copilotMetadata":null,"parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}